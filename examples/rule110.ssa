# Generated by lewc compiler, a compiler written by Dcraftbg: https://github.com/Dcraftbg
# Target: Linux x86_64
# main :: () -> i32
export function w $main () {
@start
    %board =l alloc16 120
    %.s1 =l copy %board
    %.s2 =w copy 0
    %.s3 =w copy 30
    %.s4 =w copy 4
    %.s5 =w mul %.s3, %.s4
    call $memset(l %.s1, w %.s2, w %.s5)
    %i =l alloc4 4
    %.s6 =w copy 0
    storew %.s6, %i
    %j =l alloc4 4
    %.s7 =w copy 0
    storew %.s7, %j
    %.s8 =l copy %board
    %.s9 =w copy 30
    %.s10 =w copy 2
    %.s11 =w sub %.s9, %.s10
    %.s12 =l extsw %.s11
    %.s13 =l mul %.s12, 4
    %.s14 =l add %.s8, %.s13
    %.s15 =w copy 1
    storew %.s15, %.s14
@while_cond_16
    %.s17 =w loadsw %i
    %.s18 =w copy 30
    %.s19 =w copy 2
    %.s20 =w sub %.s18, %.s19
    %.s21 =w csltw %.s17, %.s20
    jnz %.s21, @while_body_16, @while_end_16
@while_body_16
    %.s22 =l copy %j
    %.s23 =w copy 0
    storew %.s23, %.s22
@while_cond_24
    %.s25 =w loadsw %j
    %.s26 =w copy 30
    %.s27 =w csltw %.s25, %.s26
    jnz %.s27, @while_body_24, @while_end_24
@while_body_24
    %.s28 =l copy $.g0
    %.s29 =l copy %board
    %.s30 =w loadsw %j
    %.s31 =l extsw %.s30
    %.s32 =l mul %.s31, 4
    %.s33 =l add %.s29, %.s32
    %.s34 =w loadsw %.s33
    %.s35 =l extsw %.s34
    %.s37 =l add %.s28, %.s35
    %.s38 =w loadub %.s37
    call $putchar(w %.s38)
    %.s39 =l copy %j
    %.s40 =w loadsw %j
    %.s41 =w copy 1
    %.s42 =w add %.s40, %.s41
    storew %.s42, %.s39
    jmp @while_cond_24
@while_end_24
    %.s43 =w copy 10
    call $putchar(w %.s43)
    %pattern =l alloc4 4
    %.s44 =l copy %board
    %.s45 =w copy 0
    %.s46 =l extsw %.s45
    %.s47 =l mul %.s46, 4
    %.s48 =l add %.s44, %.s47
    %.s49 =w loadsw %.s48
    %.s50 =w copy 1
    %.s51 =w shl %.s49, %.s50
    %.s52 =l copy %board
    %.s53 =w copy 1
    %.s54 =l extsw %.s53
    %.s55 =l mul %.s54, 4
    %.s56 =l add %.s52, %.s55
    %.s57 =w loadsw %.s56
    %.s58 =w or %.s51, %.s57
    storew %.s58, %pattern
    %.s59 =l copy %j
    %.s60 =w copy 1
    storew %.s60, %.s59
@while_cond_61
    %.s62 =w loadsw %j
    %.s63 =w copy 30
    %.s64 =w copy 1
    %.s65 =w sub %.s63, %.s64
    %.s66 =w csltw %.s62, %.s65
    jnz %.s66, @while_body_61, @while_end_61
@while_body_61
    %.s67 =l copy %pattern
    %.s68 =w loadsw %pattern
    %.s69 =w copy 1
    %.s70 =w shl %.s68, %.s69
    %.s71 =w copy 7
    %.s72 =w and %.s70, %.s71
    %.s73 =l copy %board
    %.s74 =w loadsw %j
    %.s75 =w copy 1
    %.s76 =w add %.s74, %.s75
    %.s77 =l extsw %.s76
    %.s78 =l mul %.s77, 4
    %.s79 =l add %.s73, %.s78
    %.s80 =w loadsw %.s79
    %.s81 =w or %.s72, %.s80
    storew %.s81, %.s67
    %.s82 =l copy %board
    %.s83 =w loadsw %j
    %.s84 =l extsw %.s83
    %.s85 =l mul %.s84, 4
    %.s86 =l add %.s82, %.s85
    %.s87 =w copy 110
    %.s88 =w loadsw %pattern
    %.s89 =w shr %.s87, %.s88
    %.s90 =w copy 1
    %.s91 =w and %.s89, %.s90
    storew %.s91, %.s86
    %.s92 =l copy %j
    %.s93 =w loadsw %j
    %.s94 =w copy 1
    %.s95 =w add %.s93, %.s94
    storew %.s95, %.s92
    jmp @while_cond_61
@while_end_61
    %.s96 =l copy %i
    %.s97 =w loadsw %i
    %.s98 =w copy 1
    %.s99 =w add %.s97, %.s98
    storew %.s99, %.s96
    jmp @while_cond_16
@while_end_16
    %.s100 =w copy 0
    ret %.s100
}
# extern putchar :: (c: u8)
# extern memset :: (data: *i32, c: i32, n: i32)
data $.g0 = {b 32, b 42, b 0 }
